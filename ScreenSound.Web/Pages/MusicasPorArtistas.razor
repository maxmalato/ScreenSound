@page "/musicas-por-artista"

@inject MusicaAPI musicaAPI

<MudStack Class="my-4" Row="true" Justify="Justify.SpaceBetween">
    <MudText Class="mb-4" Typo="Typo.h4">Musicas Cadastradas</MudText>
    <MudPagination Count="@_totalPaginas" SelectedChanged="PaginaMudou"></MudPagination>
</MudStack>

@if (_musicasPorPagina is not null)
{
    <MudGrid>
        @foreach (var musica in _musicasPorPagina)
        {
            <MudItem xs="12" sm="6" md="4" lg="3" xl="2">
                <CardMusica Musica="musica" />
            </MudItem>
        }
    </MudGrid>
}
else
{
    <p><em>Carregando...</em></p>
}

@code {

    private ICollection<MusicaResponse>? _musicas;
    private int _tamanho = 8; // Quantidade de musicas que devem ser mostrados na página
    private int _totalItens;
    private int _totalPaginas;
    private ICollection<MusicaResponse>? _musicasPorPagina;

    protected override async Task OnInitializedAsync()
    {
        _musicas = await musicaAPI.GetMusicasAsync();
        if (_musicas is not null)
        {
            _musicas = _musicas.OrderByDescending(m => m.Id).ToList();
            _totalItens = _musicas.Count();
            _totalPaginas = Convert.ToInt32(Math.Ceiling((_totalItens * 1.0) / _tamanho));

            this.PaginaMudou(1);
        }
    }

    private void PaginaMudou(int numeroPagina)
    {
        var indice = numeroPagina - 1;
        _musicasPorPagina = _musicas!
            .Skip(_tamanho * indice)
            .Take(_tamanho)
            .ToList();
    }
}
